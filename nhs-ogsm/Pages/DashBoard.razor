@page "/DashBoard/{OgsmId:int}"
@using nhs_ogsm.Data
@using nhs_ogsm.Services
@inject NavigationManager NavigationManager
@inject OgsmItemService OgsmItemService;
@inject GoalService GoalService;
@inject StrategyService StrategyService;


@code{
    [Parameter]
    public int OgsmId { get; set; }

    public Ogsm? CurrentOgsm { get; set; }
    public Goal currentGoal { get; set; } = new() { EndDate = DateTimeOffset.Now };
    public Strategy CurrentStrategy { get; set; } = new();

    public bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CurrentOgsm = OgsmItemService.GetSingleOgsm(OgsmId);
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo("DashBoard");
        }
    }
    
}

<!DOCTYPE html>

<html lang="en">
<head>
    <title>OGSM: @CurrentOgsm.Title</title>
</head>
<body>

<div>
    <EditForm Model="@currentGoal" OnValidSubmit="HandleGoalSubmit">
        <DataAnnotationsValidator/>
        <table>
            <tr>
                <td><label for="NameInput">Name:</label></td>
                <td><InputText id="NameInput" @bind-Value="@currentGoal.Name"></InputText><br/></td>
                <td><ValidationMessage For="() => currentGoal.Name"/></td>
            </tr>
            <tr>
                <td><label for="DateInput">Date:</label></td>
                <td> <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="@currentGoal.EndDate"/><br/></td>
                <td><ValidationMessage For="() => currentGoal.EndDate"/></td>
            </tr>
            <tr>
                <td><label for="NameInput">Description:</label></td>
                <td><InputText id="NameInput" @bind-Value="@currentGoal.Description"></InputText><br/></td>
                <td><ValidationMessage For="() => currentGoal.Description"/></td>
            </tr>
            <tr>
                <td><button type="submit" class="btn-primary">Save</button></td>
                <td><button type="button" onclick="@(() => CancelEdit())" class="btn-primary">Cancel</button></td>
            </tr>
        </table>
    </EditForm>
    

    @if (isEdit)
    {
        <EditForm Model="@CurrentStrategy" OnValidSubmit="HandleStrategySubmit">
            <DataAnnotationsValidator/>
            <table>
                <tr>
                    <td><label for="NameInput">Name:</label></td>
                    <td><InputText id="NameInput" @bind-Value="@CurrentStrategy.Name"></InputText><br/></td>
                    <td><ValidationMessage For="() => CurrentStrategy.Name"/></td>
                </tr>
                <tr>
                    <td><button type="submit" class="btn-primary">Save</button></td>
                    <td><button type="button" onclick="@(() => CancelEdit())" class="btn-primary">Cancel</button></td>

                </tr>
            </table>
        </EditForm>
        @if (currentGoal.Strategies != null)
        {
            <table class="table">
            @foreach (var strategy in currentGoal.Strategies)
            {
                <tr>
                    <td>@strategy.Name</td>

                    <td><input type="checkbox" value="@strategy.IsDone" onchange="@(() => HandleStrategyIsDone(strategy))" class="btn btn-default"/></td>
                    <td><input type="button" value="x" onclick="@(() => HandleStrategyDelete(strategy))" class="btn btn-default"/></td>
                </tr>
            }
            </table>
        }
    }


    
</div>

@code
{
    public void HandleStrategySubmit(EditContext editContext)
    {
        var newStrategy = (Strategy)editContext.Model;
        newStrategy.ParentGoalID = currentGoal.ID;
        StrategyService.AddStrategy(newStrategy);
        currentGoal.Strategies?.Add(newStrategy);
        CurrentStrategy = new Strategy();
        StateHasChanged();
    }
    
    public void HandleStrategyDelete(Strategy strategy)
    {
        StrategyService.DeleteStrategy(strategy.ID);
        currentGoal.Strategies?.Remove(strategy);
        StateHasChanged();
    }
    // TODO: Fix IsDone should save on change
    public void HandleStrategyIsDone(Strategy strategy)
    {
        Console.WriteLine("test.");
        if (strategy.IsDone)
        {
            strategy.IsDone = false;
        }
        else
        {
            strategy.IsDone = true;
        }
        StrategyService.UpdateStrategy(strategy);
        StateHasChanged();
    }
    
    public void HandleGoalSubmit(EditContext editContext)
    {
        
        var newGoal = (Goal)editContext.Model;
        if (isEdit)
        {
            GoalService.UpdateGoal(newGoal);
            isEdit = false;
        }
        else
        {
            newGoal.ParentOgsmID = CurrentOgsm.ID;
            GoalService.AddGoal(newGoal, CurrentOgsm);
            CurrentOgsm.Goals?.Add(newGoal);
        }
        currentGoal = new Goal() { EndDate = DateTimeOffset.Now };
        StateHasChanged();
    }

    public void CancelEdit()
    {
        currentGoal = new Goal() { EndDate = DateTimeOffset.Now };
        isEdit = false;
    }
}

<div>
    
    <h1>Goals for @OgsmId - @CurrentOgsm.Title</h1>
    <table class="table">
        <thead>
        <tr>
            <th>ID</th>
            <th>Title</th>
            <th>End date</th>
            <th>Description</th>
            <th>Delete</th>
            <th>Edit</th>
        </tr>
        </thead>
        <tbody>
        @if(CurrentOgsm.Goals != null) {
            @foreach (var goal in CurrentOgsm.Goals)
            {
                <tr>
                    <td>@goal.ID</td>
                    <td>@goal.Name</td>
                    <td>@goal.EndDate</td>
                    <td>@goal.Description</td>
                    <td><input type="button" value="Delete" onclick="@(() => HandleGoalDelete(goal))" class="btn btn-default"/></td>
                    <td><input type="button" value="Edit" onclick="@(() => ActivateEdit(goal))" class="btn btn-default"/></td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

@code
{
    public void HandleGoalDelete(Goal goal)
    {
        GoalService.DeleteGoal(goal.ID);
        CurrentOgsm.Goals.Remove(goal);
        StateHasChanged();
    }
    
    public void ActivateEdit(Goal goal)
    {
        isEdit = true;
        currentGoal = goal;
        StateHasChanged();
    }
    
}
</body>
</html>