@page "/DashBoard/{OgsmId:int}"
@using nhs_ogsm.Data
@using nhs_ogsm.Services
@inject NavigationManager NavigationManager
@inject OgsmItemService OgsmItemService;
@inject GoalService GoalService;
@inject StrategyService StrategyService;


@code{
    [Parameter]
    public int OgsmId { get; set; }
    
    public Ogsm CurrentOgsm { get; set; }
    public Goal currentGoal { get; set; } = new() { EndDate = DateTimeOffset.Now };
    public Strategy CurrentStrategy { get; set; } = new();
    
    public bool isEdit = false;

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine("Started");
        try
        {
            CurrentOgsm = OgsmItemService.GetSingleOgsm(OgsmId);
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo("DashBoard");
        }
    }
    
}

<!DOCTYPE html>

<html lang="en">
<head>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <link href="css/DashBoard.css" rel="stylesheet"/>
    <title>OGSM: @CurrentOgsm.Title</title>
</head>
<body>
<div>
    @code
    {
        public string PageHeaderTitle = "Add Goal";
    }
    <h1>@PageHeaderTitle</h1>
    <div>
        <EditForm Model="@currentGoal" OnValidSubmit="HandleGoalSubmit">
            <DataAnnotationsValidator/>
            <table>
                <tr>
                    <td><label for="NameInput">Name:</label></td>
                    <td><InputText id="NameInput" @bind-Value="@currentGoal.Name"></InputText><br/></td>
                    <td><ValidationMessage For="() => currentGoal.Name"/></td>
                </tr>
                <tr>
                    <td><label for="DateInput">Date:</label></td>
                    <td> <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="@currentGoal.EndDate"/><br/></td>
                    <td><ValidationMessage For="() => currentGoal.EndDate"/></td>
                </tr>
                <tr>
                    <td><label for="NameInput">Description:</label></td>
                    <td><InputText id="NameInput" @bind-Value="@currentGoal.Description"></InputText><br/></td>
                    <td><ValidationMessage For="() => currentGoal.Description"/></td>
                </tr>
                <tr>
                    <td><button type="submit" class="btn-primary">Save</button></td>
                    <td><button type="button" onclick="@(() => CancelEdit())" class="btn-primary">Cancel</button></td>
                </tr>
            </table>
        </EditForm>
    </div>
</div>

@code
{
    public void HandleStrategySubmit(EditContext editContext)
    {
        var newStrategy = (Strategy)editContext.Model;
        newStrategy.ParentGoalID = currentGoal.ID;
        StrategyService.AddStrategy(newStrategy);
        currentGoal.Strategies?.Add(newStrategy);
        CurrentStrategy = new Strategy();
        StateHasChanged();
    }
    
    public void HandleStrategyDelete(Strategy strategy)
    {
        StrategyService.DeleteStrategy(strategy.ID);
        currentGoal.Strategies?.Remove(strategy);
        StateHasChanged();
    }
    
    public void HandleStrategyIsDone(Strategy strategy)
    {
        strategy.IsDone = !strategy.IsDone;
        StrategyService.UpdateStrategy(strategy);
        StateHasChanged();
    }
    
    public void HandleGoalSubmit(EditContext editContext)
    {
        
        var newGoal = (Goal)editContext.Model;
        if (isEdit)
        {
            GoalService.UpdateGoal(newGoal);
            isEdit = false;
        }
        else
        {
            newGoal.ParentOgsmID = CurrentOgsm.ID;
            GoalService.AddGoal(newGoal, CurrentOgsm);
            CurrentOgsm.Goals?.Add(newGoal);
        }
        currentGoal = new Goal() { EndDate = DateTimeOffset.Now };
        PageHeaderTitle = "Add Goal";
        StateHasChanged();
    }

    public void CancelEdit()
    {
        currentGoal = new Goal() { EndDate = DateTimeOffset.Now };
        isEdit = false;
        PageHeaderTitle = "Add Goal";
        StateHasChanged();
    }
}


<div class="goalList">
    <h2 class="ListTitle">Goals</h2>
    @foreach (var goal in CurrentOgsm.Goals.OrderBy(goal => goal.EndDate))
    {
        <div>
            <table>
                <tr>
                    <td>Title:</td>
                    <td>@goal.Name</td>
                </tr>
                <tr>
                    <td>Done:</td>
                    <td><input type="checkbox" checked="@goal.IsDone" onchange="@(() => HandleGoalIsDone(goal))" class="form-check-input"/></td>
                </tr>
                <tr>
                    <span onclick="@(() => ActivateEdit(goal))" class="material-symbols-outlined">Edit</span>
                    <span onclick="@(() => HandleGoalDelete(goal))" class="material-symbols-outlined remove-button">Delete</span>
                </tr>
            </table>
        </div>
    }
</div>


<div class="stratList">
    <h2>Strategies</h2>
    @if (currentGoal.Strategies != null)
    {
        <table>
            @foreach (Strategy strategy in currentGoal.Strategies)
            {
                <tr>
                    <td>
                        @strategy.Name
                    </td>
                    <td>
                        <input type="checkbox" checked="@strategy.IsDone" onchange="@(() => HandleStrategyIsDone(strategy))" class="form-check-input"/>
                        <span onclick="@(() => HandleStrategyDelete(strategy))" class="material-symbols-outlined remove-button">Delete</span>
                    </td>
                </tr>
            }

        </table>
        <EditForm Model="@CurrentStrategy" OnValidSubmit="HandleStrategySubmit">
            <DataAnnotationsValidator/>
            <table>
                <tr>
                    <td>
                        <InputText id="NameInput" @bind-Value="@CurrentStrategy.Name"></InputText><br/>
                    </td>
                    <td>
                        <button type="submit" class="material-symbols-outlined btn-primary">Add</button>
                        <button type="button" onclick="@(() => { CurrentStrategy = new Strategy();})" class="material-symbols-outlined btn-primary">Cancel</button>
                    </td>
                </tr>
            </table>
        </EditForm>
    }
</div>


@code
{
    
    public void HandleGoalDelete(Goal goal)
    {
        GoalService.DeleteGoal(goal.ID);
        CurrentOgsm.Goals.Remove(goal);
        StateHasChanged();
    }
    
    public void HandleGoalIsDone(Goal goal)
    {
        goal.IsDone = !goal.IsDone;
        GoalService.UpdateGoal(goal);
        StateHasChanged();
    }
    
    
    public void ActivateEdit(Goal goal)
    {
        PageHeaderTitle = "Editing Goal:"+goal.ID+" - "+goal.Name;
        isEdit = true;
        currentGoal = goal;
        StateHasChanged();
    }
    
}
</body>
</html>