@page "/DashBoard/{OgsmId:int}"
@using nhs_ogsm.Data
@using nhs_ogsm.Services
@using ActionMeasure = nhs_ogsm.Data.ActionMeasure
@inject NavigationManager NavigationManager
@inject OgsmItemService OgsmItemService;
@inject GoalService GoalService;
@inject StrategyService StrategyService;
@inject ActionMeasureService ActionMeasureService;


@code{
    [Parameter]
    public int OgsmId { get; set; }
    
    public Ogsm currentOgsm { get; set; }
    public IQueryable<Goal> _filterGoalList { get; set; }

    public Strategy CurrentStrategy { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentOgsm = OgsmItemService.GetSingleOgsm(OgsmId);
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo("DashBoard");
        }
        FilterGoals();
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }
}

<link href="css/DashBoard.css" rel="stylesheet"/>
<PageTitle>OGSM: @currentOgsm.Title</PageTitle>

<div>
    <h1>OGSM: @currentOgsm.Title</h1>
</div>


<div class="DashBoardBody">
    @code
    {
        
        public Goal currentGoal { get; set; } = new() { EndDate = DateTimeOffset.Now };
        Goal editGoal = new();

        public void HandleGoalSubmit(EditContext editContext)
        {
            
            var newGoal = (Goal)editContext.Model;

            newGoal.ParentOgsmID = currentOgsm.ID;
            GoalService.AddGoal(newGoal);
            currentOgsm.Goals.Add(newGoal);
        
            _formGoal = new Goal() { EndDate = DateTimeOffset.Now };
            StateHasChanged();
        }
        
        public void HandleGoalDelete(Goal goal)
        {
            GoalService.DeleteGoal(goal.ID);
            currentOgsm.Goals.Remove(goal);
            if (Equals(currentGoal, goal)) CancelGoalEdit();
            StateHasChanged();
        }
        
        public void HandleGoalEdit(EditContext editContext)
        {
            var newGoal = (Goal)editContext.Model;
            Goal realGoal = currentOgsm.Goals.First(g => g.ID == newGoal.ID);
            realGoal.Name = newGoal.Name;
            realGoal.Description = newGoal.Description;
            realGoal.EndDate = newGoal.EndDate;
            GoalService.UpdateGoal(realGoal);
        }
        
        public void HandleGoalIsDone(Goal goal)
        {
            goal.IsDone = !goal.IsDone;
            GoalService.UpdateGoal(goal);
        }
        
        public void ActivateGoalEdit(Goal goal)
        {
            currentGoal = goal;
            editGoal = new Goal {ID = goal.ID, Name = goal.Name, Description = goal.Description, EndDate = goal.EndDate};
            CurrentStrategy = new Strategy();
            StateHasChanged();
        }

        public void CancelGoalEdit()
        {
            currentGoal = new Goal() { EndDate = DateTimeOffset.Now };
            StateHasChanged();
        }

        public void RemoveStratFromGoal(Strategy strategy, Goal goal)
        {
            GoalService.RemoveStratFromGoal(strategy, goal);
            strategy.Goals.Remove(goal);
            goal.Strategies.Remove(strategy);
        }

        bool _goalFilterIsDone;
        public void FilterGoals()
        {
            _filterGoalList = currentOgsm.Goals.AsQueryable();
            if (_goalFilterIsDone)
            {
                _filterGoalList = _filterGoalList.Where(goal => !goal.IsDone);
            }
            StateHasChanged();
        }
    }
    <div class="DashboardList">
        <h2>Goals</h2>
        <div>
            <table>
                <tr>
                    <td>Hide done:</td>
                    <td><input type="checkbox" @bind-value="_goalFilterIsDone" class="form-check-input"/>@_goalFilterIsDone</td>
                </tr>
                <tr>
                    <td></td>
                    <td><Button @onclick="@FilterGoals">filter</Button></td>
                </tr>
            </table>
            <hr/>
            @* form for creating and editing goals *@
            @code{
                Goal _formGoal = new(){EndDate = DateTimeOffset.Now};
            }
            <EditForm Model="@_formGoal" OnValidSubmit="HandleGoalSubmit">
                <DataAnnotationsValidator/>
                <table>
                    <tr>
                        <td><label for="NameInput">Name:</label></td>
                        <td><InputText id="NameInput" @bind-Value="@_formGoal.Name"></InputText><br/></td>
                        <td><ValidationMessage For="() => _formGoal.Name"/></td>
                    </tr>
                    <tr>
                        <td><label for="DateInput">Due:</label></td>
                        <td><InputDate Type="InputDateType.DateTimeLocal" @bind-Value="@_formGoal.EndDate"/><br/></td>
                        <td><ValidationMessage For="() => _formGoal.EndDate"/></td>
                    </tr>
                    <tr>
                        <td><label for="NameInput">Description:</label></td>
                        <td><InputText id="NameInput" @bind-Value="@_formGoal.Description"></InputText><br/></td>
                        <td><ValidationMessage For="() => _formGoal.Description"/></td>
                    </tr>
                    <tr>
                        <td><Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Save</Button></td>
                        <td><Button @onclick="() => _formGoal = new Goal{EndDate = DateTimeOffset.Now}" Color="ButtonColor.Warning">Cancel</Button></td>
                    </tr>
                </table>
            </EditForm>
        </div>
        @* list with goals *@

        @foreach (var goal in _filterGoalList.OrderBy(goal => goal.EndDate))
        {
            // EDIT CARD FOR GOALS
            if (currentGoal.ID == goal.ID)
            {
                <EditForm Model="@editGoal" OnValidSubmit="HandleGoalEdit">
                    <div class="DashboardItem active-item">
                        <DataAnnotationsValidator/>
                        <div class="Header">
                            <td><label for="NameInput">Name:</label></td>
                            <td><InputTextArea id="NameInput" @bind-Value="@editGoal.Name"></InputTextArea><br/></td>
                        </div>
                        <div class="info">
                            <table>
                                <tr>
                                    <td><label for="DateInput">Due:</label></td>
                                    <td> <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="@editGoal.EndDate"/><br/></td>
                                    <td><ValidationMessage For="() => editGoal.EndDate"/></td>
                                </tr>
                                <tr>
                                    <td>Strategies:</td>
                                    <td>
                                        @if (goal.Strategies.Any())
                                        {
                                            Strategy lastStrat = goal.Strategies.Last();
                                            @foreach (Strategy strategy in goal.Strategies)
                                            {
                                                <a class="removable-item" @onclick="() => RemoveStratFromGoal(strategy, goal)">@strategy.Name</a>
                                                if (strategy != lastStrat)
                                                {
                                                    <span> - </span>
                                                }
                                            }
                                        }
                                    </td>
                                </tr>
                                <tr>
                                    <td>Done:</td>
                                    <td><input type="checkbox" checked="@goal.IsDone" onchange="@(() => HandleGoalIsDone(goal))" class="form-check-input"/></td>
                                </tr>
                            </table>
                        </div>
                        <div class="footer">
                            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Save</Button>
                            @* this button should reset it to the old values *@
                            <Button @onclick="@(() => CancelGoalEdit())" Color="ButtonColor.Warning">Cancel edit</Button>
                            <Button @onclick="@(() => HandleGoalDelete(goal))" Color="ButtonColor.Danger"><span class="material-symbols-outlined">Delete</span></Button>
                        </div>
                    </div>
                </EditForm>
                continue;
            }
            // NON EDIT CARD FOR GOALS
            <div class="DashboardItem">
                <div class="Header">
                    @goal.Name
                </div>
                <div class="info">
                    <table>
                        <tr>
                            <td>Due:</td>
                            <td>@goal.EndDate.DateTime</td>
                        </tr>
                        <tr>
                            <td>Strategies:</td>
                            <td>
                                @if (goal.Strategies.Any())
                                {
                                    Strategy lastStrat = goal.Strategies.Last();
                                    foreach (Strategy strategy in goal.Strategies)
                                    {
                                        <a class="removable-item" @onclick="() => RemoveStratFromGoal(strategy, goal)">@strategy.Name</a>
                                        if (strategy != lastStrat)
                                        {
                                            <span> - </span>
                                        }
                                    }
                                }
                            </td>
                        </tr>
                        <tr>
                            <td>Done:</td>
                            <td><input type="checkbox" checked="@goal.IsDone" onchange="@(() => HandleGoalIsDone(goal))" class="form-check-input"/></td>
                        </tr>
                    </table>
                </div>
                <div class="footer">
                    @if (CurrentStrategy.ID != 0 && !CurrentStrategy.Goals.Contains(goal))
                    {
                        <Button @onclick="@(() => AddStratToGoal(CurrentStrategy, goal))" Color="ButtonColor.Primary">add to goal</Button>
                    }
                    @if (currentGoal.ID == 0)
                    {
                        <Button @onclick="@(() => ActivateGoalEdit(goal))" Color="ButtonColor.Warning"><span class="material-symbols-outlined">Edit</span></Button>
                    }
                </div>
            </div>
        }
    </div>

    @code
    {
        Strategy EditStrategy = new();
        
        public void HandleStrategySubmit(EditContext editContext)
        {
            var newStrategy = (Strategy)editContext.Model;
            newStrategy.ParentOgsmID = currentOgsm.ID;
            StrategyService.AddStrategy(newStrategy);
            currentOgsm.Strategies.Add(newStrategy);
            CurrentStrategy = new Strategy();
            StateHasChanged();
        }
        
        public void HandleStrategyDelete(Strategy strategy)
        {
            StrategyService.DeleteStrategy(strategy.ID);
            currentOgsm.Strategies?.Remove(strategy);
            StateHasChanged();
        }
        
        public void HandleStrategyEdit(EditContext editContext)
        {
            var newStrategy = (Strategy)editContext.Model;
            Strategy realStrategy = currentOgsm.Strategies.First(s => s.ID == newStrategy.ID);
            realStrategy.Name = newStrategy.Name;
            StrategyService.UpdateStrategy(realStrategy);
            
        }
        
        public void ActivateStrategyEdit(Strategy strategy)
        {
            CurrentStrategy = strategy;
            EditStrategy = new Strategy {ID = strategy.ID, Name = strategy.Name};
            currentGoal = new Goal();
            StateHasChanged();
        }
        
        public void CancelStrategyEdit(){
            CurrentStrategy = new Strategy();
            StateHasChanged();
        }
        
        public void HandleStrategyIsDone(Strategy strategy)
        {
            strategy.IsDone = !strategy.IsDone;
            StrategyService.UpdateStrategy(strategy);
            StateHasChanged();
        }

        public void AddStratToGoal(Strategy strategy, Goal goal)
        {
            GoalService.AddStratToGoal(strategy, goal);
            strategy.Goals.Add(goal);
            goal.Strategies.Add(strategy);
        }
    }


    <div class="DashboardList">
        <h2>Strategies</h2>
        
        @foreach (Strategy strategy in currentOgsm.Strategies)
        {
            if (CurrentStrategy.ID == strategy.ID)
            {
                <EditForm Model="@EditStrategy" OnValidSubmit="HandleStrategyEdit">
                    <DataAnnotationsValidator/>
                    <div class="DashboardItem active-item">
                        <div class="Header">
                            <td><label for="NameInput">Name:</label></td>
                            <td><InputTextArea id="NameInput" @bind-Value="@EditStrategy.Name"></InputTextArea><br/></td>
                        </div>
                        <div class="info">
                            <table>
                                <tr>
                                    <td>Goals:</td>
                                    <td>
                                            @if (strategy.Goals.Any())
                                            {
                                                Goal lastGoal = strategy.Goals.Last();
                                                foreach (Goal goal in strategy.Goals)
                                                {
                                                    <a class="removable-item" @onclick="() => RemoveStratFromGoal(strategy, goal)">@goal.Name</a>
                                                    if (!Equals(goal, lastGoal))
                                                    {
                                                        <span> - </span>
                                                    }
                                                }
                                            }
                                    </td>
                                </tr>
                                <tr>
                                    <td>Done:</td>
                                    <td><input type="checkbox" checked="@strategy.IsDone" onchange="@(() => HandleStrategyIsDone(strategy))" class="form-check-input"/></td>
                                </tr>
                            </table>
                        </div>
                        <div class="footer">
                            <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Save</Button>
                            @* this button should reset it to the old values *@
                            <Button @onclick="@(CancelStrategyEdit)" Color="ButtonColor.Warning">Cancel edit</Button>
                            <Button @onclick="@(() => HandleStrategyDelete(strategy))" Color="ButtonColor.Danger"><span class="material-symbols-outlined">Delete</span></Button>
                        </div>
                    </div>
                </EditForm>
                continue;
            }
            <div class="DashboardItem">
                @code {

                }
                <div class="Header">
                    @strategy.Name
                </div>

                <div class="info">
                    <table>
                        <tr>
                            <td>Goals:</td>
                            <td>
                                @if (strategy.Goals.Any())
                                {
                                    Goal lastGoal = strategy.Goals.Last();
                                    foreach (Goal goal in strategy.Goals)
                                    {
                                        // TODO: betere opmaak zodat ze weten dat ze er op kunnen drukken
                                        <a class="removable-item" @onclick="() => RemoveStratFromGoal(strategy, goal)">@goal.Name</a>
                                        if (goal != lastGoal)
                                        {
                                            <span> - </span>
                                        }
                                    }
                                }
                            </td>
                        </tr>
                        <tr>
                            <td>Done:</td>
                            <td><input type="checkbox" checked="@strategy.IsDone" onchange="@(() => HandleStrategyIsDone(strategy))" class="form-check-input"/></td>
                        </tr>
                    </table>
                </div>
                <div class="footer">
                    @if (currentGoal.ID != 0 && !currentGoal.Strategies.Contains(strategy))
                    {
                        <Button @onclick="@(() => AddStratToGoal(strategy, currentGoal))" Color="ButtonColor.Primary">add to goal</Button>
                    }
                    <Button @onclick="@(() => { ActivateStrategyEdit(strategy); })" Color="ButtonColor.Warning"><span class="material-symbols-outlined">Edit</span></Button>
                </div>
            </div>
        }
        

        <div>
            <EditForm Model="@CurrentStrategy" OnValidSubmit="HandleStrategySubmit">
                <DataAnnotationsValidator/>
                <table>
                    <tr>
                        <td>
                            <InputText id="NameInput" @bind-Value="@CurrentStrategy.Name"></InputText><br/>
                        </td>
                        <td>
                            <Button Type="ButtonType.Submit" class="material-symbols-outlined btn-primary">Add</Button>
                            <Button @onclick="@(() => { CurrentStrategy = new Strategy();})" class="material-symbols-outlined btn-primary">Cancel</Button>
                        </td>
                    </tr>
                </table>
            </EditForm>
        </div>
    </div>


    @code
    {
        public ActionMeasure CurrentActionMeasure = new();
        public List<ActionMeasure> ActionMeasuresList = new();

        public void HandleActionSubmit(EditContext editContext)
        {
            if (CurrentStrategy.ID == 0) return;
            var newAction = (ActionMeasure)editContext.Model;
            newAction.ParentStrategyID = CurrentStrategy.ID;

            ActionMeasureService.AddAction(newAction);
            newAction.Strategy = CurrentStrategy;

            CurrentStrategy.Actions.Add(newAction);

            CurrentActionMeasure = new ActionMeasure();
            StateHasChanged();
        }
        
        public void HandleActionDelete(ActionMeasure action)
        {
            ActionMeasureService.DeleteAction(action.ID);
            action.Strategy.Actions.Remove(action);
            StateHasChanged();
        }
    }


    <div class="DashboardList">

        @if (CurrentStrategy.Actions.Any())
        {
            ActionMeasuresList = new();
            <h2>Measures: List from strat</h2>
            ActionMeasuresList = CurrentStrategy.Actions.ToList();
        }
        else if (currentGoal.Strategies.Any())
        {
            ActionMeasuresList = new();
            <h2>Measures: List from goal</h2>
            foreach (Strategy strategy in currentGoal.Strategies)
            {
                if (!strategy.Actions.Any()) continue;
                foreach (ActionMeasure action in strategy.Actions)
                {
                    ActionMeasuresList.Add(action);
                }
            }

        }
        else
        {
            ActionMeasuresList = new();
            <h2>Measures: List from Ogsm</h2>
            if (currentOgsm.Goals.Any())
            {
                foreach (var strategy in currentOgsm.Strategies)
                {
                    if (!strategy.Actions.Any()) continue;
                    foreach (ActionMeasure action in strategy.Actions)
                    {
                        ActionMeasuresList.Add(action);
                    }
                }
            }
        }
        @foreach (ActionMeasure action in ActionMeasuresList)
        {
            <div class="DashboardItem @(CurrentActionMeasure.ID == action.ID ? "active-item" : "")">
                <div class="info">
                    @action.Name
                    <table>
                        <tr>
                            <td>Done:</td>
                            <td><input type="checkbox" checked="@action.IsDone" class="form-check-input"/></td>
                        </tr>
                    </table>
                </div>
                <div class="footer">
                    <Button @onclick="@(() => { CurrentActionMeasure = action; })" Color="ButtonColor.Warning"><span class="material-symbols-outlined">Edit</span></Button>
                    @if (CurrentActionMeasure.ID == action.ID)
                    {
                        <Button @onclick="@(() => HandleActionDelete(action))" Color="ButtonColor.Danger" Outline="true"><span class="material-symbols-outlined">Delete</span></Button>
                    }
                </div>
            </div>
        }
        
        @if (CurrentStrategy.ID != 0)
        {
            <div>
                <EditForm Model="@CurrentActionMeasure" OnValidSubmit="HandleActionSubmit">
                    <DataAnnotationsValidator/>
                    <table>
                        <tr>
                            <td>
                                <InputText id="NameInput" @bind-Value="@CurrentActionMeasure.Name"></InputText><br/>
                            </td>
                        </tr>
                        <tr>
                            <td>
                                <Button Type="ButtonType.Submit" class="material-symbols-outlined btn-primary">Add</Button>
                                <Button @onclick="@(() => { CurrentActionMeasure = new ActionMeasure();})" class="material-symbols-outlined btn-primary">Cancel</Button>
                            </td>
                        </tr>
                    </table>
                </EditForm>
            </div>
        }

    </div>
</div>