@page "/DashBoard/{OgsmId:int}"
@using nhs_ogsm.Data
@using nhs_ogsm.Services
@using ActionMeasure = nhs_ogsm.Data.ActionMeasure
@inject NavigationManager NavigationManager
@inject OgsmItemService OgsmItemService;
@inject GoalService GoalService;
@inject StrategyService StrategyService;
@inject ActionMeasureService ActionMeasureService;


@code{
    [Parameter]
    public int OgsmId { get; set; }
    
    public Ogsm currentOgsm { get; set; }
    public IQueryable<Goal> _filterGoalList { get; set; }

    public Strategy CurrentStrategy { get; set; } = new();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentOgsm = OgsmItemService.GetSingleOgsm(OgsmId);
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo("DashBoard");
        }
        FilterGoals();

    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }
    

}

<link href="css/DashBoard.css" rel="stylesheet"/>
<PageTitle>OGSM: @currentOgsm.Title</PageTitle>
@code{
     public void HandleOgsmDelete()
    {
        OgsmItemService.DeleteOgsm(currentOgsm.ID);
        NavigationManager.NavigateTo("DashBoard");
    }
    
    public void HandleOgsmEdit(EditContext editContext)
    {
        var newOgsm = (Ogsm)editContext.Model;
        Ogsm realOgsm = OgsmItemService.GetSingleOgsm(newOgsm.ID);
        realOgsm.Title = newOgsm.Title;
        realOgsm.IsActive = newOgsm.IsActive;
        OgsmItemService.UpdateOgsm(realOgsm);
        
        currentOgsm.Title = newOgsm.Title;
        _editOgsm.Title = newOgsm.Title;
    }
    
    
    Ogsm _editOgsm = new();
    Modal OgsmEditModal;
    string OgsmFormId = "OgsmEditForm";
    string modalTitle = "Edit";
    
    private async Task OnShowModalClick()
    {
        modalTitle = "Edit " + currentOgsm.Title;
        _editOgsm = new Ogsm {ID = currentOgsm.ID, Title = currentOgsm.Title, IsActive = currentOgsm.IsActive};
        await OgsmEditModal.ShowAsync();
    }
}
<div class="ogsm-objective">
    <h1>Objective: @currentOgsm.Title<span @onclick="OnShowModalClick" class="material-symbols-outlined">Settings</span></h1>
</div>
<Modal @ref="OgsmEditModal" Title=@modalTitle>
    <BodyTemplate>
         <EditForm id="@OgsmFormId" Model="@_editOgsm" OnValidSubmit="HandleOgsmEdit">
             <DataAnnotationsValidator/>
             <table>
                 <tr>
                     <td>Title:</td>
                     <td><InputText class="input" id="NameInput" @bind-Value="@_editOgsm.Title"></InputText></td>
                 </tr>
                 <tr>
                     <td><Switch Label="Active" @bind-Value="_editOgsm.IsActive"/></td>
                 </tr>
             </table>
         </EditForm>   
    </BodyTemplate>
    <FooterTemplate>
        <Button form="@OgsmFormId" Color="ButtonColor.Primary" Type="ButtonType.Submit">Save</Button>
    </FooterTemplate>
</Modal>

<div class="ogsm-dash">
    @code
    {
        
        public Goal currentGoal { get; set; } = new() { EndDate = DateTimeOffset.Now };
        Goal editGoal = new();

        public void HandleGoalSubmit(EditContext editContext)
        {
            
            var newGoal = (Goal)editContext.Model;

            newGoal.ParentOgsmID = currentOgsm.ID;
            GoalService.AddGoal(newGoal);
            currentOgsm.Goals.Add(newGoal);
        
            _formGoal = new Goal() { EndDate = DateTimeOffset.Now };
            StateHasChanged();
        }
        
        public void HandleGoalDelete(Goal goal)
        {
            GoalService.DeleteGoal(goal.ID);
            currentOgsm.Goals.Remove(goal);
            if (Equals(currentGoal, goal)) CancelGoalEdit();
            StateHasChanged();
        }
        
        public void HandleGoalEdit(EditContext editContext)
        {
            var newGoal = (Goal)editContext.Model;
            Goal realGoal = currentOgsm.Goals.First(g => g.ID == newGoal.ID);
            realGoal.Name = newGoal.Name;
            realGoal.Description = newGoal.Description;
            realGoal.EndDate = newGoal.EndDate;
            GoalService.UpdateGoal(realGoal);
        }
        
        public void HandleGoalIsDone(Goal goal)
        {
            goal.IsDone = !goal.IsDone;
            GoalService.UpdateGoal(goal);
        }
        
        public void ActivateGoalEdit(Goal goal)
        {
            currentGoal = goal;
            editGoal = new Goal {ID = goal.ID, Name = goal.Name, Description = goal.Description, EndDate = goal.EndDate};
            CurrentStrategy = new Strategy();
            StateHasChanged();
        }

        public void CancelGoalEdit()
        {
            currentGoal = new Goal() { EndDate = DateTimeOffset.Now };
            StateHasChanged();
        }

        public void RemoveStratFromGoal(Strategy strategy, Goal goal)
        {
            GoalService.RemoveStratFromGoal(strategy, goal);
            strategy.Goals.Remove(goal);
            goal.Strategies.Remove(strategy);
        }

        bool _goalFilterIsDone;
        public void FilterGoals()
        {
            _filterGoalList = currentOgsm.Goals.AsQueryable();
            if (_goalFilterIsDone)
            {
                _filterGoalList = _filterGoalList.Where(goal => !goal.IsDone);
            }
            StateHasChanged();
        }

        Collapse goalFiltersCollapse = default!;
        Collapse GoalAddCollapse = default!;
    }
    <CardsList Title="Goals">
        <CardHeader>
            <Collapse @ref="goalFiltersCollapse">
                <table>
                    <tr>
                        <td>Hide done:</td>
                        <td><input type="checkbox" @bind-value="_goalFilterIsDone" class="form-check-input"/>@_goalFilterIsDone</td>
                    </tr>
                    <tr>
                        <td></td>
                        <td><Button @onclick="@FilterGoals">filter</Button></td>
                    </tr>
                </table>
            </Collapse>
            <Button Color="ButtonColor.Primary" @onclick="() => goalFiltersCollapse.ToggleAsync()"> Toggle Settings </Button>
            
        </CardHeader>
        <Collapse @ref="GoalAddCollapse">
            <CardHeader>
            <EditForm Model="@_formGoal" OnValidSubmit="HandleGoalSubmit">
                <Card>
                    <DataAnnotationsValidator/>
                    <CardHeader>
                        <td><label for="NameInput">Name:</label></td>
                        <td><InputTextArea class="input" id="NameInput" @bind-Value="@_formGoal.Name"></InputTextArea><br/></td>
                        <td><ValidationMessage For="() => _formGoal.Name"/></td>
                    </CardHeader>
                    <CardBody>
                        <table>
                            <tr>
                                <td><label for="DateInput">Due:</label></td>
                                <td><InputDate class="input" Type="InputDateType.DateTimeLocal" @bind-Value="@_formGoal.EndDate"/><br/></td>
                                <td><ValidationMessage For="() => _formGoal.EndDate"/></td>
                            </tr>
                            <tr>
                                <td><label for="NameInput">Description:</label></td>
                                <td><InputText class="input" id="NameInput" @bind-Value="@_formGoal.Description"></InputText><br/></td>
                                <td><ValidationMessage For="() => _formGoal.Description"/></td>
                            </tr>
                        </table>
                    </CardBody>
                    <CardFooter>
                        <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Add Goal</Button>
                        <Button @onclick="() => { _formGoal = new Goal { EndDate = DateTimeOffset.Now }; GoalAddCollapse.HideAsync(); }" Color="ButtonColor.Warning">Cancel</Button>
                    </CardFooter>
                </Card>
            </EditForm>
            </CardHeader>
        </Collapse>
        <CardBody>
            @* form for creating and editing goals *@

            @code{
                Goal _formGoal = new() { EndDate = DateTimeOffset.Now };
            }
            

            @* list with goals *@

            @foreach (var goal in _filterGoalList.OrderBy(goal => goal.EndDate))
            {
                // EDIT CARD FOR GOALS
                if (currentGoal.ID == goal.ID)
                {
                    <EditForm Model="@editGoal" OnValidSubmit="HandleGoalEdit">
                        <Card class="active-item">
                            <DataAnnotationsValidator/>
                            <CardHeader>
                                <td><label for="NameInput">Name:</label></td>
                                <td><InputTextArea class="input" id="NameInput" @bind-Value="@editGoal.Name"></InputTextArea><br/></td>
                            </CardHeader>
                            <CardBody>
                                <table>
                                    <tr>
                                        <td><label for="DateInput">Due:</label></td>
                                        <td> <InputDate class="input" Type="InputDateType.DateTimeLocal" @bind-Value="@editGoal.EndDate"/><br/></td>
                                        <td><ValidationMessage For="() => editGoal.EndDate"/></td>
                                    </tr>
                                    <tr>
                                        <td>Strategies:</td>
                                        <td>
                                            @if (goal.Strategies.Any())
                                            {
                                                Strategy lastStrat = goal.Strategies.Last();
                                                @foreach (Strategy strategy in goal.Strategies)
                                                {
                                                    <a class="removable-item" @onclick="() => RemoveStratFromGoal(strategy, goal)">@strategy.Name</a>
                                                    if (strategy != lastStrat)
                                                    {
                                                        <span> - </span>
                                                    }
                                                }
                                            }
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>Done:</td>
                                        <td><input type="checkbox" checked="@goal.IsDone" onchange="@(() => HandleGoalIsDone(goal))" class="form-check-input"/></td>
                                    </tr>
                                </table>
                            </CardBody>
                            <CardFooter>
                                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Save</Button>
                                @* this button should reset it to the old values *@
                                <Button @onclick="@(() => CancelGoalEdit())" Color="ButtonColor.Warning">Cancel edit</Button>
                                <Button @onclick="@(() => HandleGoalDelete(goal))" Color="ButtonColor.Danger"><span class="material-symbols-outlined">Delete</span></Button>
                            </CardFooter>
                        </Card>
                    </EditForm>
                    continue;
                }

                // NON EDIT CARD FOR GOALS
                <Card>
                    <CardHeader>
                        @goal.Name
                    </CardHeader>
                    <CardBody>
                        <table>
                            <tr>
                                <td>Due:</td>
                                <td>@goal.EndDate.DateTime</td>
                            </tr>
                            <tr>
                                <td>Strategies:</td>
                                <td>
                                    @if (goal.Strategies.Any())
                                    {
                                        Strategy lastStrat = goal.Strategies.Last();
                                        foreach (Strategy strategy in goal.Strategies)
                                        {
                                            <a class="removable-item" @onclick="() => RemoveStratFromGoal(strategy, goal)">@strategy.Name</a>
                                            if (strategy != lastStrat)
                                            {
                                                <span> - </span>
                                            }
                                        }
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>Done:</td>
                                <td><input type="checkbox" checked="@goal.IsDone" onchange="@(() => HandleGoalIsDone(goal))" class="form-check-input"/></td>
                            </tr>
                        </table>
                    </CardBody>
                    <CardFooter>
                        @if (CurrentStrategy.ID != 0 && !CurrentStrategy.Goals.Contains(goal))
                        {
                            <Button @onclick="@(() => AddStratToGoal(CurrentStrategy, goal))" Color="ButtonColor.Primary">add to goal</Button>
                        }
                        @if (currentGoal.ID == 0)
                        {
                            <Button @onclick="@(() => ActivateGoalEdit(goal))" Color="ButtonColor.Warning"><span class="material-symbols-outlined">Edit</span></Button>
                        }
                    </CardFooter>
                </Card>
            }
        </CardBody>
        <CardFooter>
            <Button Color="ButtonColor.Success" @onclick="() => GoalAddCollapse.ToggleAsync()">Add Goal</Button>
        </CardFooter>
    </CardsList>

    @code
    {
        Strategy _editStrategy = new();
        
        public void HandleStrategyDelete(Strategy strategy)
        {
            StrategyService.DeleteStrategy(strategy.ID);
            currentOgsm.Strategies?.Remove(strategy);
            StateHasChanged();
        }
        
        public void HandleStrategyEdit(EditContext editContext)
        {
            var newStrategy = (Strategy)editContext.Model;
            Strategy realStrategy = currentOgsm.Strategies.First(s => s.ID == newStrategy.ID);
            realStrategy.Name = newStrategy.Name;
            StrategyService.UpdateStrategy(realStrategy);
            
        }
        
        public void ActivateStrategyEdit(Strategy strategy)
        {
            CurrentStrategy = strategy;
            _editStrategy = new Strategy {ID = strategy.ID, Name = strategy.Name};
            currentGoal = new Goal();
            StateHasChanged();
        }
        
        public void CancelStrategyEdit(){
            CurrentStrategy = new Strategy();
            StateHasChanged();
        }
        
        public void HandleStrategyIsDone(Strategy strategy)
        {
            strategy.IsDone = !strategy.IsDone;
            StrategyService.UpdateStrategy(strategy);
            StateHasChanged();
        }

        public void AddStratToGoal(Strategy strategy, Goal goal)
        {
            GoalService.AddStratToGoal(strategy, goal);
            strategy.Goals.Add(goal);
            goal.Strategies.Add(strategy);
        }
    }


    <CardsList Title="Strategies">
        <CardBody>
            @foreach (Strategy strategy in currentOgsm.Strategies)
            {
                if (CurrentStrategy.ID == strategy.ID)
                {
                    <EditForm Model="@_editStrategy" OnValidSubmit="HandleStrategyEdit">
                        <DataAnnotationsValidator/>
                        <Card class="active-item">
                            <CardHeader>
                                <td><label for="NameInput">Name:</label></td>
                                <td><InputTextArea class="input" id="NameInput" @bind-Value="@_editStrategy.Name"></InputTextArea><br/></td>
                            </CardHeader>
                            <CardBody>
                                <table>
                                    <tr>
                                        <td>Goals:</td>
                                        <td>
                                            @if (strategy.Goals.Any())
                                            {
                                                Goal lastGoal = strategy.Goals.Last();
                                                foreach (Goal goal in strategy.Goals)
                                                {
                                                    <a class="removable-item" @onclick="() => RemoveStratFromGoal(strategy, goal)">@goal.Name</a>
                                                    if (!Equals(goal, lastGoal))
                                                    {
                                                        <span> - </span>
                                                    }
                                                }
                                            }
                                        </td>
                                    </tr>
                                    <tr>
                                        <td>Done:</td>
                                        <td><input type="checkbox" checked="@strategy.IsDone" onchange="@(() => HandleStrategyIsDone(strategy))" class="form-check-input"/></td>
                                    </tr>
                                </table>
                            </CardBody>
                            <CardFooter>
                                <Button Type="ButtonType.Submit" Color="ButtonColor.Primary">Save</Button>
                                @* this button should reset it to the old values *@
                                <Button @onclick="@(CancelStrategyEdit)" Color="ButtonColor.Warning">Cancel edit</Button>
                                <Button @onclick="@(() => HandleStrategyDelete(strategy))" Color="ButtonColor.Danger"><span class="material-symbols-outlined">Delete</span></Button>
                            </CardFooter>
                        </Card>
                    </EditForm>
                    continue;
                }
                
                <Card>
                    <CardHeader>
                        @strategy.Name
                    </CardHeader>
                    <CardBody>
                        <table>
                            <tr>
                                <td>Goals:</td>
                                <td>
                                    @if (strategy.Goals.Any())
                                    {
                                        Goal lastGoal = strategy.Goals.Last();
                                        foreach (Goal goal in strategy.Goals)
                                        {
                                            // TODO: betere opmaak zodat ze weten dat ze er op kunnen drukken
                                            <a class="removable-item" @onclick="() => RemoveStratFromGoal(strategy, goal)">@goal.Name</a>
                                            if (goal != lastGoal)
                                            {
                                                <span> - </span>
                                            }
                                        }
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>Done:</td>
                                <td><input type="checkbox" checked="@strategy.IsDone" onchange="@(() => HandleStrategyIsDone(strategy))" class="form-check-input"/></td>
                            </tr>
                        </table>
                    </CardBody>
                    <CardFooter>
                        @if (currentGoal.ID != 0 && !currentGoal.Strategies.Contains(strategy))
                        {
                            <Button @onclick="@(() => AddStratToGoal(strategy, currentGoal))" Color="ButtonColor.Primary">add to goal</Button>
                        }
                        <Button @onclick="@(() => { ActivateStrategyEdit(strategy); })" Color="ButtonColor.Warning"><span class="material-symbols-outlined">Edit</span></Button>
                    </CardFooter>
                </Card>
            }
        </CardBody>
        @code{
            Strategy _formStrategy = new();
            
            public void HandleStrategySubmit(EditContext editContext)
            {
                var newStrategy = (Strategy)editContext.Model;
                newStrategy.ParentOgsmID = currentOgsm.ID;
                StrategyService.AddStrategy(newStrategy);
                currentOgsm.Strategies.Add(newStrategy);
                _formStrategy = new Strategy();
                StateHasChanged();
            }
        }
        <CardFooter>
            <EditForm Model="@_formStrategy" OnValidSubmit="HandleStrategySubmit">
                <DataAnnotationsValidator/>
                <table>
                    <tr>
                        <td>
                            <InputText class="input" id="NameInput" @bind-Value="@_formStrategy.Name"></InputText><br/>
                        </td>
                        <td>
                            <Button Type="ButtonType.Submit" class="material-symbols-outlined btn-primary">Add</Button>
                            <Button @onclick="@(() => { _formStrategy = new Strategy(); })" class="material-symbols-outlined btn-primary">Cancel</Button>
                        </td>
                    </tr>
                </table>
            </EditForm>
        </CardFooter>
    </CardsList>


    @code
    {
        private ActionMeasure CurrentActionMeasure = new();
        private List<ActionMeasure> ActionMeasuresList = new();
        private ActionMeasure _editActionMeasure = new();

        public void ActivateActionEdit(ActionMeasure action)
        {
            CurrentActionMeasure = action;
            _editActionMeasure = new ActionMeasure {ID = action.ID, Name = action.Name};
            StateHasChanged();
        }
        
        public void HandleActionEdit(EditContext editContext)
        {
            var newAction = (ActionMeasure)editContext.Model;
            ActionMeasure realAction = ActionMeasureService.GetSingleAction(newAction.ID);
            realAction.Name = newAction.Name;
            CurrentActionMeasure.Name = newAction.Name;
            ActionMeasureService.UpdateAction(realAction);
            StateHasChanged();
        }
        
        public void HandleActionDelete(ActionMeasure action)
        {
            ActionMeasureService.DeleteAction(action.ID);
            action.Strategy.Actions.Remove(action);
            StateHasChanged();
        }

        private string GetMeasuresListTitle()
        {
            if (CurrentStrategy.Actions.Any())
                return "Measures (Strategy: " + CurrentStrategy.Name + ")";
            
            if (currentGoal.Strategies.Any())
                return "Measures (Goal: " + currentGoal.Name + ")";

            return "Measures (All)";
        }
    }


    <CardsList Title="@GetMeasuresListTitle()">
        <CardBody>
            @if (CurrentStrategy.Actions.Any())
            {
                ActionMeasuresList = new();
                ActionMeasuresList = CurrentStrategy.Actions.ToList();
            }
            else if (currentGoal.Strategies.Any())
            {
                ActionMeasuresList = new();
                foreach (Strategy strategy in currentGoal.Strategies)
                {
                    if (!strategy.Actions.Any()) continue;
                    foreach (ActionMeasure action in strategy.Actions)
                    {
                        ActionMeasuresList.Add(action);
                    }
                }

            }
            else
            {
                ActionMeasuresList = new();
                if (currentOgsm.Goals.Any())
                {
                    foreach (var strategy in currentOgsm.Strategies)
                    {
                        if (!strategy.Actions.Any()) continue;
                        foreach (ActionMeasure action in strategy.Actions)
                        {
                            ActionMeasuresList.Add(action);
                        }
                    }
                }
            }
            
            @foreach (ActionMeasure action in ActionMeasuresList)
            {
                if (CurrentActionMeasure.ID == action.ID)
                {
                    <EditForm Model="@_editActionMeasure" OnValidSubmit="HandleActionEdit">
                        <DataAnnotationsValidator/>
                        <Card class="active-item">
                            <CardBody>
 
                                <table>
                                    <tr>
                                        <td>Title:</td>
                                        <InputTextArea @bind-Value="_editActionMeasure.Name"></InputTextArea>
                                    </tr>
                                    <tr>
                                        <td>Done:</td>
                                        <td><input type="checkbox" checked="@action.IsDone" class="form-check-input"/></td>
                                    </tr>
                                </table>
                            </CardBody>
                            <CardFooter>
                                <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Save</Button>
                                <Button @onclick="() => CurrentActionMeasure = new ActionMeasure()" Color="ButtonColor.Warning">Cancel</Button>
                                <Button @onclick="@(() => HandleActionDelete(action))" Color="ButtonColor.Danger" Outline="true"><span class="material-symbols-outlined">Delete</span></Button>

                            </CardFooter>
                        </Card>
                    </EditForm>
                    continue;
                }
                <Card>
                    <CardBody>
                        @action.Name
                        <table>
                            <tr>
                                <td>Done:</td>
                                <td><input type="checkbox" checked="@action.IsDone" class="form-check-input"/></td>
                            </tr>
                        </table>
                    </CardBody>
                    <CardFooter>
                        <Button @onclick="@(() => { ActivateActionEdit(action); })" Color="ButtonColor.Warning"><span class="material-symbols-outlined">Edit</span></Button>
                    </CardFooter>
                </Card>
            }
        </CardBody>
        @code
        {
            private ActionMeasure _formActionMeasure = new();
            
            public void HandleActionSubmit(EditContext editContext)
            {
                if (CurrentStrategy.ID == 0) return;
                var newAction = (ActionMeasure)editContext.Model;
                newAction.ParentStrategyID = CurrentStrategy.ID;

                ActionMeasureService.AddAction(newAction);
                newAction.Strategy = CurrentStrategy;
                CurrentStrategy.Actions.Add(newAction);

                _formActionMeasure = new ActionMeasure();
                StateHasChanged();
            }
        }
        <CardFooter>
        @if (CurrentStrategy.ID != 0)
        {
            <EditForm Model="@_formActionMeasure" OnValidSubmit="HandleActionSubmit">
                <DataAnnotationsValidator/>
                <table>
                    <tr>
                        <td>Title:</td>
                        <td>
                            <InputText class="input" id="NameInput" @bind-Value="@_formActionMeasure.Name"></InputText><br/>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <Button Type="ButtonType.Submit" class="material-symbols-outlined btn-primary">Add</Button> 
                            <Button @onclick="@(() => { _formActionMeasure = new ActionMeasure(); })" class="material-symbols-outlined btn-primary">Cancel</Button>
                        </td>
                    </tr>
                </table>
            </EditForm>
        }
        else
        {
            <Alert  Color="AlertColor.Info">
                Please select a strategy to add an action measure    
            </Alert>
        }
        </CardFooter>
    </CardsList>
</div>