@page "/DashBoard/{OgsmId:int}"
@using nhs_ogsm.Data
@using nhs_ogsm.Services
@using ActionMeasure = nhs_ogsm.Data.ActionMeasure
@inject NavigationManager NavigationManager
@inject OgsmItemService OgsmItemService;
@inject GoalService GoalService;
@inject StrategyService StrategyService;
@inject ActionMeasureService ActionMeasureService;


@code{
    [Parameter]
    public int OgsmId { get; set; }
    
    public Ogsm currentOgsm { get; set; }
    public IQueryable<Goal> _filterGoalList { get; set; }
    public Goal currentGoal { get; set; } = new() { EndDate = DateTimeOffset.Now };
    public Strategy CurrentStrategy { get; set; } = new();
    public bool isEdit;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            currentOgsm = OgsmItemService.GetSingleOgsm(OgsmId);
        }
        catch (Exception e)
        {
            NavigationManager.NavigateTo("DashBoard");
        }
        FilterGoals();
    }

    protected override async Task OnParametersSetAsync()
    {
        await OnInitializedAsync();
    }
}
<!DOCTYPE html>

<html lang="en">
<head>
    <link href="css/DashBoard.css" rel="stylesheet"/>
    <PageTitle>OGSM: @currentOgsm.Title</PageTitle>
</head>
<body>
<div>
    @code
    {
        public string PageHeaderTitle = "Add Goal";
    }
    <h1>@PageHeaderTitle</h1>

</div>

@code
{
    
    List<int> _unsavedGoals = new List<int>();

    public void HandleGoalSubmit(EditContext editContext)
    {
        
        var newGoal = (Goal)editContext.Model;
        if (isEdit)
        {
            GoalService.UpdateGoal(newGoal);
            isEdit = false;
        }
        else
        {
            newGoal.ParentOgsmID = currentOgsm.ID;
            GoalService.AddGoal(newGoal);
            currentOgsm.Goals.Add(newGoal);
        }
        currentGoal = new Goal() { EndDate = DateTimeOffset.Now };
        PageHeaderTitle = "Add Goal";
        StateHasChanged();
    }
    
    public void HandleGoalDelete(Goal goal)
    {
        GoalService.DeleteGoal(goal.ID);
        currentOgsm.Goals.Remove(goal);
        if (currentGoal == goal) CancelEdit();
        StateHasChanged();
    }
    
    public void HandleGoalIsDone(Goal goal)
    {
        goal.IsDone = !goal.IsDone;
        GoalService.UpdateGoal(goal);
    // StateHasChanged();
    }
    
    public void ActivateEditGoal(Goal goal)
    {
        PageHeaderTitle = "Editing Goal:"+goal.ID+" - "+goal.Name;
        isEdit = true;
        currentGoal = goal;
        CurrentStrategy = new Strategy();
        StateHasChanged();
    }

    public void CancelEdit()
    {
        currentGoal = new Goal() { EndDate = DateTimeOffset.Now };
        CurrentStrategy = new Strategy();
        isEdit = false;
        PageHeaderTitle = "Add Goal";
        StateHasChanged();
    }

    public void RemoveStratFromGoal(Strategy strategy, Goal goal)
    {
        GoalService.RemoveStratFromGoal(strategy, goal);
        strategy.Goals.Remove(goal);
        goal.Strategies.Remove(strategy);
    }

    bool _goalFilterIsDone;
    public void FilterGoals()
    {
        _filterGoalList = currentOgsm.Goals.AsQueryable();
        if (_goalFilterIsDone)
        {
            _filterGoalList = _filterGoalList.Where(goal => !goal.IsDone);
        }
        StateHasChanged();
    }
}
<div class="DashboardList">
    changes:
    @foreach (int Id in _unsavedGoals)
    {
        <span>@Id - </span>
    }
    <div>
        <table>
            <tr>
                <td>Hide done:</td>
                <td><input type="checkbox" @bind-value="_goalFilterIsDone" class="form-check-input"/>@_goalFilterIsDone</td>
            </tr>
            <tr>
                <td></td>
                <td><Button OnClick="@FilterGoals">filter</Button></td>
            </tr>
        </table>
        <hr/>
        @* form for creating and editing goals *@
        <EditForm Model="@currentGoal" OnValidSubmit="HandleGoalSubmit">
            <DataAnnotationsValidator/>
            <table>
                <tr>
                    <td><label for="NameInput">Name:</label></td>
                    <td><InputText id="NameInput" @bind-Value="@currentGoal.Name"></InputText><br/></td>
                    <td><ValidationMessage For="() => currentGoal.Name"/></td>
                </tr>
                <tr>
                    <td><label for="DateInput">Due:</label></td>
                    <td> <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="@currentGoal.EndDate"/><br/></td>
                    <td><ValidationMessage For="() => currentGoal.EndDate"/></td>
                </tr>
                <tr>
                    <td><label for="NameInput">Description:</label></td>
                    <td><InputText id="NameInput" @bind-Value="@currentGoal.Description"></InputText><br/></td>
                    <td><ValidationMessage For="() => currentGoal.Description"/></td>
                </tr>
                <tr>
                    <td><Button type="submit" Color="Button.BtnColor.Primary">Save</Button></td>
                    <td><Button type="button" OnClick="@CancelEdit" Color="Button.BtnColor.Warning">Cancel</Button></td>
                </tr>
            </table>
        </EditForm>
    </div>
    @* list with goals *@
    <h2>Goals</h2>
    @foreach (var goal in _filterGoalList.OrderBy(goal => goal.EndDate))
    {
        if (currentGoal.ID == goal.ID)
        {
            <EditForm Model="@currentGoal" OnValidSubmit="HandleGoalSubmit">
                <div class="DashboardItem active-item">
                    <DataAnnotationsValidator/>
                    <div class="Header">
                        <td><label for="NameInput">Name:</label></td>
                        <td><InputTextArea id="NameInput" @bind-Value="@currentGoal.Name"></InputTextArea><br/></td>
                    </div>
                    <div class="info">
                        <table>
                            <tr>
                                <td><label for="DateInput">Due:</label></td>
                                <td> <InputDate Type="InputDateType.DateTimeLocal" @bind-Value="@currentGoal.EndDate"/><br/></td>
                                <td><ValidationMessage For="() => currentGoal.EndDate"/></td>
                            </tr>
                            <tr>
                                <td>Strategies:</td>
                                <td>
                                    @if (goal.Strategies.Any())
                                    {
                                        Strategy lastStrat = goal.Strategies.Last();
                                        @foreach (Strategy strategy in goal.Strategies)
                                        {
                                            <a class="removable-item" @onclick="() => RemoveStratFromGoal(strategy, goal)">@strategy.Name</a>
                                            if (strategy != lastStrat)
                                            {
                                                <span> - </span>
                                            }
                                        }
                                    }
                                </td>
                            </tr>
                            <tr>
                                <td>Done:</td>
                                <td><input type="checkbox" checked="@goal.IsDone" onchange="@(() => HandleGoalIsDone(goal))" class="form-check-input"/></td>
                            </tr>
                        </table>
                    </div>
                    <div class="footer">
                        <Button type="submit" Color="Button.BtnColor.Primary">Save</Button>
                        <Button OnClick="@(() => CancelEdit())" Color="Button.BtnColor.Warning">Cancel edit</Button>
                        <Button OnClick="@(() => HandleGoalDelete(goal))" Color="Button.BtnColor.Danger"><span class="material-symbols-outlined">Delete</span></Button>
                    </div>
                </div>
            </EditForm>
            continue;
        }
        <div class="DashboardItem">
            <div class="Header">
                @goal.Name
            </div>
            <div class="info">
                <table>
                    <tr>
                        <td>Due:</td>
                        <td>@goal.EndDate.DateTime</td>
                    </tr>
                    <tr>
                        <td>Strategies:</td>
                        <td>
                            @if (goal.Strategies.Any())
                            {
                                Strategy lastStrat = goal.Strategies.Last();
                                foreach (Strategy strategy in goal.Strategies)
                                {
                                    <a class="removable-item" @onclick="() => RemoveStratFromGoal(strategy, goal)">@strategy.Name</a>
                                    if (strategy != lastStrat)
                                    {
                                        <span> - </span>
                                    }
                                }
                            }
                        </td>
                    </tr>
                    <tr>
                        <td>Done:</td>
                        <td><input type="checkbox" checked="@goal.IsDone" onchange="@(() => HandleGoalIsDone(goal))" class="form-check-input"/></td>
                    </tr>
                </table>
            </div>
            <div class="footer">
                @if (CurrentStrategy.ID != 0 && !CurrentStrategy.Goals.Contains(goal))
                {
                    <Button OnClick="@(() => AddStratToGoal(CurrentStrategy, goal))" Color="Button.BtnColor.Primary">add to goal</Button>
                }
                @if (currentGoal.ID == 0)
                {
                    <Button OnClick="@(() => ActivateEditGoal(goal))" Color="Button.BtnColor.Warning"><span class="material-symbols-outlined">Edit</span></Button>
                }
            </div>
        </div>
    }
</div>

@code
{
    private Goal _currentSelectedGoalForStrategy = new();
    private List<Goal> _goalsNotInStrat = new();
    
    public void HandleStrategySubmit(EditContext editContext)
    {
        var newStrategy = (Strategy)editContext.Model;
        newStrategy.ParentOgsmID = currentOgsm.ID;
        StrategyService.AddStrategy(newStrategy);
        currentOgsm.Strategies.Add(newStrategy);
        CurrentStrategy = new Strategy();
        StateHasChanged();
    }
    
    public void HandleStrategyDelete(Strategy strategy)
    {
        StrategyService.DeleteStrategy(strategy.ID);
        currentOgsm.Strategies?.Remove(strategy);
        StateHasChanged();
    }
    
    public void HandleStrategyIsDone(Strategy strategy)
    {
        strategy.IsDone = !strategy.IsDone;
        StrategyService.UpdateStrategy(strategy);
        StateHasChanged();
    }
    
    public List<Goal> GetGoalsNotInStrategy(Strategy strategy)
    {
        if(!currentOgsm.Goals.Any()) return new List<Goal>();
        return currentOgsm.Goals.Except(strategy.Goals ?? new List<Goal>()).ToList();
    }

    public void AddStratToGoal(Strategy strategy, Goal goal)
    {
        GoalService.AddStratToGoal(strategy, goal);
        strategy.Goals.Add(goal);
        goal.Strategies.Add(strategy);
    }
}


<div class="DashboardList">
    <h2>Strategies</h2>
    
    @foreach (Strategy strategy in currentOgsm.Strategies)
    {
        
        <div class="DashboardItem @(CurrentStrategy.ID == strategy.ID?"active-item":"" )">
            <div class="Header">
                @strategy.Name
            </div>
            <div class="info">
                <table>
                    <tr>
                        <td>Goals:</td>
                        <td>
                                @if (strategy.Goals.Any())
                                {
                                    Goal lastGoal = strategy.Goals.Last();
                                    @foreach (Goal goal in strategy.Goals)
                                    {
                                        // TODO: betere opmaak zodat ze weten dat ze er op kunnen drukken
                                        <a class="removable-item" @onclick="() => RemoveStratFromGoal(strategy, goal)">@goal.Name</a>
                                        if (goal != lastGoal)
                                        {
                                            <span> - </span>
                                        }
                                    }
                                }
                        </td>
                    </tr>
                    <tr>
                        <td>Done:</td>
                        <td><input type="checkbox" checked="@strategy.IsDone" onchange="@(() => HandleStrategyIsDone(strategy))" class="form-check-input"/></td>
                    </tr>
                </table>
            </div>
            <div class="footer">
                @if (currentGoal.ID != 0 && !currentGoal.Strategies.Contains(strategy))
                {
                    <Button OnClick="@(() => AddStratToGoal(strategy, currentGoal))" Color="Button.BtnColor.Primary">add to goal</Button>
                }
                <Button OnClick="@(() => { CurrentStrategy = strategy; _goalsNotInStrat = GetGoalsNotInStrategy(strategy); })" Color="Button.BtnColor.Warning"><span class="material-symbols-outlined">Edit</span></Button>
                @if (CurrentStrategy.ID == strategy.ID)
                {
                    <Button OnClick="@(() => HandleStrategyDelete(strategy))" Color="Button.BtnColor.DangerInverted"><span class="material-symbols-outlined">Delete</span></Button>
                }
            </div>
        </div>
    }
    

    <div>
        <EditForm Model="@CurrentStrategy" OnValidSubmit="HandleStrategySubmit">
            <DataAnnotationsValidator/>
            <table>
                <tr>
                    <td>
                        <InputText id="NameInput" @bind-Value="@CurrentStrategy.Name"></InputText><br/>
                    </td>
                    <td>
                        <button type="submit" class="material-symbols-outlined btn-primary">Add</button>
                        <button type="button" onclick="@(() => { CurrentStrategy = new Strategy();})" class="material-symbols-outlined btn-primary">Cancel</button>
                    </td>
                </tr>
            </table>
        </EditForm>
    </div>
</div>


@code
{
    public ActionMeasure CurrentActionMeasure = new();
    public List<ActionMeasure> ActionMeasuresList = new();

    public void HandleActionSubmit(EditContext editContext)
    {
        if (CurrentStrategy.ID == 0) return;
        var newAction = (ActionMeasure)editContext.Model;
        newAction.ParentStrategyID = CurrentStrategy.ID;

        ActionMeasureService.AddAction(newAction);
        newAction.Strategy = CurrentStrategy;

        CurrentStrategy.Actions.Add(newAction);

        CurrentActionMeasure = new ActionMeasure();
        StateHasChanged();
    }
    
    public void HandleActionDelete(ActionMeasure action)
    {
        ActionMeasureService.DeleteAction(action.ID);
        action.Strategy.Actions.Remove(action);
        StateHasChanged();
    }
}


<div class="DashboardList">

    @if (CurrentStrategy.Actions.Any())
    {
        ActionMeasuresList = new();
        <h2>Measures: List from strat</h2>
        ActionMeasuresList = CurrentStrategy.Actions.ToList();
    }
    else if (currentGoal.Strategies.Any())
    {
        ActionMeasuresList = new();
        <h2>Measures: List from goal</h2>
        foreach (Strategy strategy in currentGoal.Strategies)
        {
            if (!strategy.Actions.Any()) continue;
            foreach (ActionMeasure action in strategy.Actions)
            {
                ActionMeasuresList.Add(action);
            }
        }

    }
    else
    {
        ActionMeasuresList = new();
        <h2>Measures: List from Ogsm</h2>
        if (currentOgsm.Goals.Any())
        {
            foreach (var strategy in currentOgsm.Strategies)
            {
                if (!strategy.Actions.Any()) continue;
                foreach (ActionMeasure action in strategy.Actions)
                {
                    ActionMeasuresList.Add(action);
                }
            }
        }
    }
    @foreach (ActionMeasure action in ActionMeasuresList)
    {
        <div class="DashboardItem @(CurrentActionMeasure.ID == action.ID?"active-item":"" )">
            <div class="info">
                @action.Name
                <table>
                    <tr>
                        <td>Done:</td>
                        <td><input type="checkbox" checked="@action.IsDone" class="form-check-input"/></td>
                    </tr>
                </table>
            </div>
            <div class="footer">
                <Button OnClick="@(() => { CurrentActionMeasure = action;})" Color="Button.BtnColor.Warning"><span class="material-symbols-outlined">Edit</span></Button>
                @if (CurrentActionMeasure.ID == action.ID)
                {
                    <Button OnClick="@(() => HandleActionDelete(action))" Color="Button.BtnColor.DangerInverted"><span class="material-symbols-outlined">Delete</span></Button>
                }
            </div>
        </div>
    }
    
    @if (CurrentStrategy.ID != 0)
    {
        <div>
            <EditForm Model="@CurrentActionMeasure" OnValidSubmit="HandleActionSubmit">
                <DataAnnotationsValidator/>
                <table>
                    <tr>
                        <td>
                            <InputText id="NameInput" @bind-Value="@CurrentActionMeasure.Name"></InputText><br/>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            <button type="submit" class="material-symbols-outlined btn-primary">Add</button>
                            <button type="button" onclick="@(() => { CurrentActionMeasure = new ActionMeasure();})" class="material-symbols-outlined btn-primary">Cancel</button>
                        </td>
                    </tr>
                </table>
            </EditForm>
        </div>
    }

</div>

</body>
</html>