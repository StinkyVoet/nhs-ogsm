@page "/Overview"
@using nhs_ogsm.Data
@using nhs_ogsm.Services
@using System.Drawing
@using ChartJs.Blazor.BarChart;
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Util
@using ChartJs.Blazor.BarChart.Axes
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Axes.Ticks
@using InteractionMode = ChartJs.Blazor.Common.Enums.InteractionMode



@inject OgsmItemService OgsmItemService;



<PageTitle>Overview</PageTitle>
<h1>Overview</h1>
<br/>
<br/>
@code
{
    
    private BarConfig ogsmOverView;
    protected override void OnInitialized()
    {
        
        ogsmOverView = new BarConfig()
        {
            Options = new BarOptions()
            {
                Tooltips = new Tooltips
                {
                    Mode = InteractionMode.X,
                },
                Responsive = true,
                Title = new OptionsTitle
                {
                    Text = "Ogsm Overview",
                    Display = true
                },
                Scales = new BarScales()
                {
                    YAxes = new List<CartesianAxis>()
                    {
                        new BarLinearCartesianAxis()
                        {
                            Stacked = true,
                            ScaleLabel = new ScaleLabel()
                            {
                                LabelString = "Items",
                                Display = true
                            },
                            Ticks = new LinearCartesianTicks()
                            {
                                BeginAtZero = true,
                                StepSize = 1,
                                SuggestedMax = 5,
                                
                            }
                        },
                    },
                }
            },
        };
        
        IDataset<int> doneGoalDataSet = new BarDataset<int>()
        {
            Label = "Finished Goals",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(255, 37, 73)),
            Stack = "Goals",
        };
        IDataset<int> notDoneGoalDataSet = new BarDataset<int>()
        {
            Label = "Unfinished Goals",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(50,255, 37, 73)),
            Stack = "Goals",
        };
        ogsmOverView.Data.Datasets.Add(doneGoalDataSet);
        ogsmOverView.Data.Datasets.Add(notDoneGoalDataSet);
        
        IDataset<int> doneStratDataSet = new BarDataset<int>()
        {
            Label = "Finished Strats",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(229, 135, 0)),
            Stack = "Strats",
        };
        IDataset<int> notDoneStratDataSet = new BarDataset<int>()
        {
            Label = "Unfinished Strats",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(50,229, 135, 0)),
            Stack = "Strats",
        };
        ogsmOverView.Data.Datasets.Add(doneStratDataSet);
        ogsmOverView.Data.Datasets.Add(notDoneStratDataSet);
        
        IDataset<int> doneActionsDataSet = new BarDataset<int>()
        {
            Label = "Finished Actions",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(0, 135, 229)),
            Stack = "Actions",
        };
        IDataset<int> notDoneActionsDataSet = new BarDataset<int>()
        {
            Label = "Unfinished Actions",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.FromArgb(50,0, 135, 229)),
            Stack = "Actions",
        };
        ogsmOverView.Data.Datasets.Add(doneActionsDataSet);
        ogsmOverView.Data.Datasets.Add(notDoneActionsDataSet);
        
        foreach (Ogsm ogsm in OgsmItemService.GetAllOgsm())
        {
            ogsmOverView.Data.Labels.Add(ogsm.Title);
            
            doneGoalDataSet.Add(ogsm.Goals.Count(g => g.IsDone));
            notDoneGoalDataSet.Add(ogsm.Goals.Count(g => !g.IsDone));
            
            doneStratDataSet.Add(ogsm.Strategies.Count(s => s.IsDone));
            notDoneStratDataSet.Add(ogsm.Strategies.Count(s => !s.IsDone));
            
            int doneActions = 0;
            int notDoneActions = 0;
            foreach (var strategy in ogsm.Strategies)
            {
                doneActions += strategy.Actions.Count(a => a.IsDone);
                notDoneActions += strategy.Actions.Count(a => !a.IsDone);
            }
            doneActionsDataSet.Add(doneActions);
            notDoneActionsDataSet.Add(notDoneActions);
        }
    }
    
}
<Chart Config="ogsmOverView"></Chart>