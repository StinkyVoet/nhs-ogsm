@page "/Users"
@using nhs_ogsm.Data
@using nhs_ogsm.Services
@using BlazorBootstrap
@inject UserService UserService;
@inject GroupService GroupService;
@inject NavigationManager NavigationManager;

<h3>User Overview</h3>

@code
{
    public List<User> _users;

    //get Users on load
    protected override async Task OnInitializedAsync()
    {
        _users = UserService.GetAllUsers();
        _allGroups = GroupService.GetAllGroups();
    }
    
    public void Redirect(string uri)
    {
        NavigationManager.NavigateTo(uri);
    }
}

<html>
<head>
    <link href="css\main.css" rel="stylesheet"/>
    <title>Users</title>
</head>

<style>
    .dashboardButton {
        border: 2px solid #04AA6D;
        padding: 24px 32px;
        text-align: center;
        font-size: 24px;
        border-radius: 8px;   
        box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2), 0 6px 16px 0 rgba(0,0,0,0.19);
        float: right;
        transition-duration: 0.4s;
        position: sticky;
        bottom: 10px;
    }
    
    .dashboardButton:hover {
        background-color: #04AA6D;
          color: white;
    }
</style>
@code{

    private Modal _editModal = default!;
    private User _editingUser = new();
    private int _SelectedGroup;
    List<Group> _allGroups = new();
    
    public void AddGroupToUser()
    {
        if (_SelectedGroup == 0) return;
        if (_editingUser.Groups.Any(group => group.ID == _SelectedGroup)) return;
        
        Group selectedGroup = new Group(){ID = _SelectedGroup};
        UserService.AddGroupToUser(_editingUser, selectedGroup);
        _editingUser.Groups.Add(selectedGroup);
        StateHasChanged();
    }
    
    public void RemoveGroupFromUser(Group group)
    {
        UserService.RemoveGroupFromUser(_editingUser, group);
        _editingUser.Groups.Remove(group);
        StateHasChanged();
    }
    
    public void HandleUserEdit(EditContext editContext)
    {
        var newUser = (User)editContext.Model;
        _editingUser = newUser;
        
        UserService.UpdateUser(_editingUser);
        HideModal(_editModal);
    }
    
    public void ShowModal(Modal modal)
    {
        modal.ShowAsync();
    }
    
    private void HideModal(Modal modal)
    {
        modal.HideAsync();
    }

}
<Modal @ref="_editModal" Title="Editing User">
    <BodyTemplate>

        <EditForm Model="@_editingUser" OnValidSubmit="HandleUserEdit">
            <DataAnnotationsValidator/>
            <table>
                <tr>
                    <td><label>Email:</label></td>
                    <td><InputText class="input" @bind-Value="@_editingUser.Email"></InputText></td>
                    <td><ValidationMessage For="() => _editingUser.Email"/></td>
                </tr>
                <tr>
                    <td><label>First Name:</label></td>
                    <td><InputText class="input" @bind-Value="@_editingUser.FirstName"></InputText></td>
                    <td><ValidationMessage For="() => _editingUser.FirstName"/></td>
                </tr>
                <tr>
                    <td><label>Last Name:</label></td>
                    <td><InputText class="input" @bind-Value="@_editingUser.LastName"></InputText></td>
                    <td><ValidationMessage For="() => _editingUser.LastName"/></td>
                </tr>
                <tr>
                    <td><label>Password:</label></td>
                    <td><InputText type="password" class="input" @bind-Value="@_editingUser.Password"></InputText></td>
                    <td><ValidationMessage For="() => _editingUser.Password"/></td>
                </tr>
                <tr>
                    <td><label>Group:</label></td>
                    <td>

                        <InputSelect class="input" @bind-Value="@_SelectedGroup">
                            <option value="0">None</option>
                            @foreach (var group in _allGroups.OrderBy(g => g.Name))
                            {
                                if (_editingUser.Groups.Any(group1 => group1.ID == group.ID)) continue;
                                <option value="@group.ID">@group.Name</option>
                            }
                        </InputSelect>
                    </td>
                    <td><Button Color="ButtonColor.Info" @onclick="() => { AddGroupToUser(); }">+</Button></td>
                </tr>
                <tr>
                    <td>
                        @foreach (var group in _editingUser.Groups)
                        {
                            <div class="removable-item" @onclick="() => RemoveGroupFromUser(group)">@group.Name</div>
                        }
                    </td>
                </tr>
            </table>
            <Button Type="ButtonType.Submit" Color="ButtonColor.Success">Save</Button>
            <Button @onclick="() => { _editingUser = new User(); HideModal(_editModal); }" Color="ButtonColor.Warning">Cancel</Button>
        </EditForm>
    </BodyTemplate>
</Modal>
<table class="table"  style="table-layout: fixed">
    <thead>
    <tr>
        <th>Name</th>
        <th>E-mail</th>
        <th>Role</th>
        <th>Groups</th>
        <th>Action</th>
    </tr>
    </thead>
    <tbody>
     
    @if (_users != null)
    {
        @foreach (var user in _users)
        {
            <tr>
                <td>@user.FirstName @user.LastName</td>
                <td>@user.Email</td>
                <td>
                    @if (user.IsAdmin)
                    {
                        <p>Admin</p>
                    }
                    else
                    {
                        <p>User</p>
                    }
                </td>
                <td>
                    @if (user.Groups != null)
                    {
                        @foreach (var group in user.Groups)
                        {
                            <p>@group.Name</p>
                        }
                    }
                </td>
                <td>
                    <Button @onclick="@(() => { _editingUser = user; ShowModal(_editModal); })" Color="ButtonColor.Primary">Edit</Button>
                    <Button @onclick="@(() => DeleteUser(user.ID))" Color="ButtonColor.Danger">Delete</Button>
                </td>
            </tr>
        }
    }
    </tbody>
</table>

<button class="dashboardButton" onclick="@(() => Redirect("UserCreator/"))">+</button>

</html>

@code
{
    private async Task DeleteUser(int id)
    {
        await UserService.DeleteUser(id);
        _users = UserService.GetAllUsers();
        StateHasChanged();
    }
}
